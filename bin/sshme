#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck disable=2086,2016

_get_input() {
    # 添加输入验证
    if [[ -z "${ssh_conf_files[*]}" ]]; then
        echo "Error: No SSH config files found" >&2
        return 1
    fi

    # 添加端口号验证
    if ! [[ "$ssh_port" =~ ^[0-9]+$ ]] || [ "$ssh_port" -lt 1 ] || [ "$ssh_port" -gt 65535 ]; then
        echo "Error: Invalid port number" >&2
        return 1
    fi

    count=0
    if "${delete_flag:-false}"; then
        if "${has_fzf:-false}"; then
            ssh_host=$("$CMD_AWK" '/^Host/ {print $2}' "${ssh_conf_files[@]}" | "$CMD_GREP" -v '\*' | fzf)
        else
            select s in $("$CMD_AWK" '/^Host/ {print $2}' "${ssh_conf_files[@]}" | "$CMD_GREP" -v '\*'); do
                ssh_host="$s"
                break
            done
        fi
    else
        read -rp "[$((++count))]. Enter SSH IP: [ip|dns|user@ip:port] " read_ssh_host
        if [[ "$read_ssh_host" == *@* ]]; then
            IFS='@:' read -r ssh_user ssh_host ssh_port <<<"$read_ssh_host"
            ssh_port=${ssh_port:-22}
        else
            read -rp "[$((++count))]. Enter SSH user: [root] " ssh_user
            read -rp "[$((++count))]. Enter SSH port: [22] " ssh_port
            ssh_user=${ssh_user:-root}
            ssh_host=${read_ssh_host:? "SSH IP empty"}
            ssh_port=${ssh_port:-22}
        fi
        read -rp "[$((++count))]. Enter SSH name: [alias name] " read_ssh_name
        read -rp "[$((++count))]. Enable byobu? [Y/n] " read_byobu
        ssh_name="${read_ssh_name:-host_${ssh_host//./_}}"
    fi

    if "${has_fzf:-false}"; then
        ssh_conf=$(printf '%s\n' "${ssh_conf_files[@]}" | fzf)
        ansible_conf=$(printf '%s\n' "${ansible_host_files[@]}" | fzf)
    else
        select c in "${ssh_conf_files[@]}"; do
            ssh_conf="$("$CMD_READLINK" -f "$c")"
            break
        done
        select a in "${ansible_host_files[@]}"; do
            ansible_conf="$("$CMD_READLINK" -f "$a")"
            break
        done
    fi
}

_add_host() {
    if "$CMD_GREP" -qE "^Host.*${ssh_name}$|^### ${ssh_name} begin" "$ssh_conf"; then
        echo "host ${ssh_name} exist, skip"
        return 1
    fi

    cat >>"$ssh_conf" <<EOF

### ${ssh_name} begin  ##$([[ "${read_byobu:-y}" == [yY] ]] && echo " byobu")
Host ${ssh_name}
    HostName ${ssh_host}
    User ${ssh_user}$([[ "${ssh_port}" == 22 ]] || echo -e "\n    Port ${ssh_port}")
### ${ssh_name} end

EOF

    [ -f "$ansible_conf" ] && echo "${ssh_name}" >>"$ansible_conf"
}

_delete_host() {
    "$CMD_SED" -i "/^### ${ssh_host:? empty ssh host} begin/,/^### ${ssh_host} end/d" "${ssh_conf:? empty ssh conf}"
    [ -f "$ansible_conf" ] && "$CMD_SED" -i "/^${ssh_host}$/d" "$ansible_conf"
}

_port_forward() {
    if ! command -v nc &>/dev/null; then
        echo >&2 "I require nc but it's not installed. Aborting."
        return 1
    fi

    local ssh_host="${1:? ERR: ssh_host empty}"
    local ssh_forward_port="${1:-3306}"
    local ssh_opt='ssh -qfg -o ExitOnForwardFailure=yes'
    ## create ssh tunnel
    $ssh_opt -L "$ssh_forward_port":localhost:3306 $ssh_host "sleep 300" || true
    ## kill ssh tunnel timeout
    (
        count=0
        while nc -vz localhost "$ssh_forward_port"; do
            # echo "ssh forward port $ssh_forward_port exist."
            ((count++))
            if [ $count -gt 30 ]; then
                echo "ssh forward port $ssh_forward_port exist too long, break."
                pkill -f "$ssh_opt -L $ssh_forward_port:localhost:3306" || true
                break
            fi
            sleep 10
        done
    ) &
}

# 添加批量导入功能
_batch_import() {
    local import_file="$1"
    while IFS=, read -r user host port alias; do
        ssh_host="$host"
        ssh_user="$user"
        ssh_port="$port"
        ssh_name="$alias"
        _add_host
    done <"$import_file"
}

_show_help() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS] [COMMAND]

Commands:
    add                 Add new SSH host
    update             Update existing SSH host
    delete             Delete SSH host
    port HOST [PORT]   Create SSH port forward
    list               List all SSH hosts
    backup             Backup SSH config
    import FILE        Import hosts from CSV file
    test HOST          Test SSH connection

Options:
    -h, --help         Show this help message
    -v, --verbose      Increase verbosity
    -f, --force        Force operation without confirmation

Examples:
    $(basename "$0") add
    $(basename "$0") port myserver 3306
    $(basename "$0") import hosts.csv
EOF
}

IFS=$'\n\t'

CMD_READLINK=$(command -v greadlink || command -v readlink)
CMD_SED=$(command -v gsed || command -v sed)
CMD_AWK=$(command -v gawk || command -v awk)
CMD_GREP=$(command -v ggrep || command -v grep)

main() {
    # set -xe
    # LANG="en_US.UTF-8"
    # LC_COLLATE="en_US.UTF-8"
    # LC_CTYPE="en_US.UTF-8"
    # LC_MESSAGES="en_US.UTF-8"
    # LC_MONETARY="en_US.UTF-8"
    # LC_NUMERIC="en_US.UTF-8"
    # LC_TIME="en_US.UTF-8"

    if [ "$1" = port ]; then
        shift
        _port_forward "$@"
        return
    fi

    ssh_conf_files=("$HOME"/.ssh/config*)
    ansible_host_files=("$HOME"/src/*devops*/ansible/hosts "$HOME"/.ansible/hosts)

    has_fzf=$(command -v fzf >/dev/null && echo true || echo false)

    if "${has_fzf}"; then
        host=$(printf 'add\nupdate\ndelete\n%s\n' "$("$CMD_AWK" '/^Host/ {print $2}' "${ssh_conf_files[@]}" | "$CMD_GREP" -v '\*')" | fzf)
    else
        select h in add update delete $("$CMD_AWK" '/^Host/ {print $2}' "${ssh_conf_files[@]}" | "$CMD_GREP" -v '\*'); do
            host=$h
            break
        done
    fi

    case "${host:-quit}" in
    'quit')
        return
        ;;
    'add')
        _get_input
        _add_host
        ;;
    'update')
        _get_input
        _delete_host
        _add_host
        ;;
    'delete')
        delete_flag=true
        _get_input
        _delete_host
        ;;
    *)
        if "$CMD_GREP" -B2 -E "Host\s+${host}$" "${ssh_conf_files[@]}" | "$CMD_GREP" -q 'byobu'; then
            uname -a | "$CMD_GREP" -i -q 'iphone.*ish' || use_byobu='byobu'
        fi
        ## get username from $1
        [ -n "${1}" ] && host="${1}@${host}"
        ssh -A -t "${host}" ${use_byobu}
        ;;
    esac
}

main "$@"
