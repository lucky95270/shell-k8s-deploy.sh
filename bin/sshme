#!/usr/bin/env bash
# shellcheck disable=2086

_get_input() {
    count=0
    if "${delete_flag:-false}"; then
        if "${has_fzf:-false}"; then
            ssh_host=$(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*' | fzf)
        else
            select s in $(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*'); do
                ssh_host="$s"
                break
            done
        fi
    else
        read -rp "[$((++count))]. Enter SSH IP: [ip|dns|user@ip:port] " read_ssh_host
        if [[ "$read_ssh_host" == *@* ]]; then
            IFS='@:' read -r ssh_user ssh_host ssh_port <<<"$read_ssh_host"
            ssh_port=${ssh_port:-22}
        else
            read -rp "[$((++count))]. Enter SSH user: [root] " ssh_user
            read -rp "[$((++count))]. Enter SSH port: [22] " ssh_port
            ssh_user=${ssh_user:-root}
            ssh_host=${read_ssh_host:? "SSH IP empty"}
            ssh_port=${ssh_port:-22}
        fi
        read -rp "[$((++count))]. Enter SSH name: [alias name] " read_ssh_name
        read -rp "[$((++count))]. Enable byobu? [Y/n] " read_byobu
        ssh_name="${read_ssh_name:-host_${ssh_host//./_}}"
    fi

    if "${has_fzf:-false}"; then
        ssh_conf=$(printf '%s\n' "${ssh_conf_files[@]}" | fzf)
        ansible_conf=$(printf '%s\n' "${ansible_host_files[@]}" | fzf)
    else
        select c in "${ssh_conf_files[@]}"; do
            ssh_conf="$(readlink -f "$c")"
            break
        done
        select a in "${ansible_host_files[@]}"; do
            ansible_conf="$(readlink -f "$a")"
            break
        done
    fi
}

_add_host() {
    if grep -qE "^Host.*${ssh_name}$|^### ${ssh_name} begin" "$ssh_conf"; then
        echo "host ${ssh_name} exist, skip"
        return 1
    fi

    cat >>"$ssh_conf" <<EOF

### ${ssh_name} begin  ##$([[ "${read_byobu:-y}" == [yY] ]] && echo " byobu")
Host ${ssh_name}
    HostName ${ssh_host}
    User ${ssh_user}$([[ "${ssh_port}" == 22 ]] || echo -e "\n    Port ${ssh_port}")
### ${ssh_name} end

EOF

    [ -f "$ansible_conf" ] && echo "${ssh_name}" >>"$ansible_conf"
}

_delete_host() {
    sed -i "/^### ${ssh_host:? empty ssh host} begin/,/^### ${ssh_host} end/d" "${ssh_conf:? empty ssh conf}"
    [ -f "$ansible_conf" ] && sed -i "/^${ssh_host}$/d" "$ansible_conf"
}

_port_forward() {
    if ! command -v nc &>/dev/null; then
        echo >&2 "I require nc but it's not installed. Aborting."
        return 1
    fi
    ssh_opt='ssh -qfg -o ExitOnForwardFailure=yes'
    ssh_host='ip.mysql.server'
    ssh_forward_port="${1:-3306}"
    ## create ssh tunnel
    $ssh_opt -L "$ssh_forward_port":localhost:3306 $ssh_host "sleep 300" || true
    ## kill ssh tunnel timeout
    (
        count=0
        while nc -vz localhost "$ssh_forward_port"; do
            # echo "ssh forward port $ssh_forward_port exist."
            ((count++))
            if [ $count -gt 30 ]; then
                echo "ssh forward port $ssh_forward_port exist too long, break."
                pkill -f "$ssh_opt -L $ssh_forward_port:localhost:3306" || true
                break
            fi
            sleep 10
        done
    ) &
}

main() {
    # set -xe
    # LANG="en_US.UTF-8"
    # LC_COLLATE="en_US.UTF-8"
    # LC_CTYPE="en_US.UTF-8"
    # LC_MESSAGES="en_US.UTF-8"
    # LC_MONETARY="en_US.UTF-8"
    # LC_NUMERIC="en_US.UTF-8"
    # LC_TIME="en_US.UTF-8"

    if [ "$1" = port ]; then
        shift
        _port_forward "$@"
        return
    fi

    ssh_conf_files=("$HOME"/.ssh/config*)
    ansible_host_files=("$HOME"/src/*devops*/ansible/hosts "$HOME"/.ansible/hosts)

    has_fzf=$(command -v fzf >/dev/null && echo true || echo false)

    if "${has_fzf}"; then
        host=$(printf 'add\nupdate\ndelete\n%s\n' "$(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*')" | fzf)
    else
        select h in add update delete $(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*'); do
            host=$h
            break
        done
    fi

    case "${host:-quit}" in
    'quit')
        return
        ;;
    'add')
        _get_input
        _add_host
        ;;
    'update')
        _get_input
        _delete_host
        _add_host
        ;;
    'delete')
        delete_flag=true
        _get_input
        _delete_host
        ;;
    *)
        if grep -B2 -E "Host\s+${host}$" "${ssh_conf_files[@]}" | grep -q 'byobu'; then
            uname -a | grep -i -q 'iphone.*ish' || use_byobu='byobu'
        fi
        ## get username from $1
        [ -n "${1}" ] && host="${1}@${host}"
        ssh -A -t "${host}" ${use_byobu}
        ;;
    esac
}

main "$@"
