#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck disable=2086,2016

get_input() {
    # 添加输入验证
    if [[ -z "${ssh_conf_files[*]}" ]]; then
        echo "Error: No SSH config files found" >&2
        return 1
    fi
    local ansible_host_files
    ansible_host_files=("$HOME"/src/*devops*/ansible/hosts "$HOME"/.ansible/hosts)

    count=0
    if "${delete_flag:-false}"; then
        if "${has_fzf:-false}"; then
            ssh_host=$(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*' | fzf)
        else
            select s in $(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*'); do
                ssh_host="$s"
                break
            done
        fi
    else
        read -rp "[$((++count))]. Enter SSH IP: [ip|dns|user@ip:port] " read_ssh_host
        if [[ "$read_ssh_host" == *@* ]]; then
            IFS='@:' read -r ssh_user ssh_host ssh_port <<<"$read_ssh_host"
            ssh_port=${ssh_port:-22}
        else
            read -rp "[$((++count))]. Enter SSH user: [root] " ssh_user
            read -rp "[$((++count))]. Enter SSH port: [22] " ssh_port
            ssh_user=${ssh_user:-root}
            ssh_host=${read_ssh_host:? "SSH IP empty"}
            ssh_port=${ssh_port:-22}
        fi
        read -rp "[$((++count))]. Enter SSH name: [alias name] " read_ssh_name
        # read -rp "[$((++count))]. Enable byobu? [Y/n] " read_byobu
        ssh_alias="${read_ssh_name:-host_${ssh_host//./_}}"
    fi

    if "${has_fzf:-false}"; then
        if [ "${#ssh_conf_files[@]}" -eq 1 ]; then
            ssh_conf="${ssh_conf_files[0]}"
        else
            ssh_conf=$(printf '%s\n' "${ssh_conf_files[@]}" | fzf)
        fi

        if [ "${#ansible_host_files[@]}" -eq 1 ]; then
            ansible_conf="${ansible_host_files[0]}"
        else
            ansible_conf=$(printf '%s\n' "${ansible_host_files[@]}" | fzf)
        fi
    else
        if [ "${#ssh_conf_files[@]}" -eq 1 ]; then
            ssh_conf="$(readlink -f "${ssh_conf_files[0]}")"
        else
            select c in "${ssh_conf_files[@]}"; do
                ssh_conf="$(readlink -f "$c")"
                break
            done
        fi

        if [ "${#ansible_host_files[@]}" -eq 1 ]; then
            ansible_conf="$(readlink -f "${ansible_host_files[0]}")"
        else
            select a in "${ansible_host_files[@]}"; do
                ansible_conf="$(readlink -f "$a")"
                break
            done
        fi
    fi
}

list_hosts() {
    if [ "$1" = verify ]; then
        local alias="$2"
        if grep -qE "^Host.*${alias}$|^### ${alias} begin" "$ssh_conf"; then
            echo "Host ${alias} exist, skip"
            return 0
        else
            echo "Host ${alias} not exist"
            return 1
        fi
    fi
    if "${has_fzf}"; then
        printf 'add\nupdate\ndelete\nport\nimport\n%s\n' "$(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*')" | fzf
    else
        select h in add update delete $(awk '/^Host/ {print $2}' "${ssh_conf_files[@]}" | grep -v '\*'); do
            echo "$h"
            break
        done
    fi
}

add_host() {
    local user=$1 host=$2 port=$3 alias=$4
    list_hosts verify ${alias} && return 1

    cat >>"$ssh_conf" <<EOF

### ${alias} begin  ##$([[ "${read_byobu:-y}" == [yY] ]] && echo " byobu")
Host ${alias}
    HostName ${host}
    User ${user}$([[ "${port}" == 22 ]] || echo -e "\n    Port ${port}")
### ${alias} end

EOF

    [ -f "$ansible_conf" ] && echo "${alias}" >>"$ansible_conf"
}

delete_host() {
    sed -i "/^### ${ssh_host:? empty ssh_host} begin/,/^### ${ssh_host} end/d" "${ssh_conf:? empty ssh conf}"
    [ -f "$ansible_conf" ] && sed -i "/^${ssh_host}$/d" "$ansible_conf"
}

port_forward() {
    if ! command -v nc &>/dev/null; then
        echo >&2 "I require nc but it's not installed. Aborting."
        return 1
    fi

    local ssh_host="${1:? ERR: ssh_host empty}"
    local ssh_forward_port="${2:-3306}"
    ## create ssh tunnel
    ssh -qfg -o ExitOnForwardFailure=yes -L "$ssh_forward_port":localhost:3306 $ssh_host "sleep 300" || true
    ## kill ssh tunnel timeout
    (
        count=0
        while nc -vz localhost "$ssh_forward_port"; do
            # echo "ssh forward port $ssh_forward_port exist."
            ((count++))
            if [ $count -gt 30 ]; then
                echo "ssh forward port $ssh_forward_port exist too long, break."
                pkill -f "ssh -qfg -o ExitOnForwardFailure=yes -L $ssh_forward_port:localhost:3306" || true
                break
            fi
            sleep 10
        done
    ) &
}

# 添加批量导入功能
batch_import() {
    local import_file="$1"
    while IFS=, read -r ssh_user ssh_host ssh_port ssh_alias; do
        add_host $ssh_user $ssh_host $ssh_port $ssh_alias
    done <"$import_file"
}

connect_host() {
    local host="$1" user_name="$2"
    if grep -B2 -E "Host\s+${host}$" "${ssh_conf_files[@]}" | grep -q 'byobu'; then
        uname -a | grep -i -q 'iphone.*ish' || use_byobu='byobu'
    fi
    ## get username from $1
    [ -n "${user_name}" ] && host="${user_name}@${host}"
    ssh -A -t "${host}" ${use_byobu}
}

show_help() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS] [COMMAND]

Commands:
    add                Add new SSH Host
    update             Update existing SSH Host
    delete             Delete SSH Host
    port HOST [PORT]   Create SSH port forward
    list               List all SSH hosts
    import FILE        Import hosts from CSV file
    test HOST          Test SSH connection

Options:
    -h, --help         Show this help message
    -v, --verbose      Increase verbosity
    -f, --force        Force operation without confirmation

Examples:
    $(basename "$0") add
    $(basename "$0") port myserver 3306
    $(basename "$0") import hosts.csv
EOF
}

IFS=$'\n\t'

main() {
    # set -xe
    # LANG="en_US.UTF-8"
    # LC_COLLATE="en_US.UTF-8"
    # LC_CTYPE="en_US.UTF-8"
    # LC_MESSAGES="en_US.UTF-8"
    # LC_MONETARY="en_US.UTF-8"
    # LC_NUMERIC="en_US.UTF-8"
    # LC_TIME="en_US.UTF-8"

    ssh_conf_files=("$HOME"/.ssh/config*)

    has_fzf=$(command -v fzf >/dev/null && echo true || echo false)

    choice=$(list_hosts)

    case "${choice:-quit}" in
    quit)
        show_help
        ;;
    port)
        port_forward "$@"
        ;;
    add)
        get_input
        add_host $ssh_user $ssh_host $ssh_port $ssh_alias
        ;;
    update)
        get_input
        delete_host
        add_host $ssh_user $ssh_host $ssh_port $ssh_alias
        ;;
    delete)
        delete_flag=true
        get_input
        delete_host
        ;;
    import)
        batch_import "$@"
        ;;
    *)
        connect_host "$choice" "$@"
        ;;
    esac
}

main "$@"
