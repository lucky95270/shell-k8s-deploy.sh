# shellcheck disable=SC2148,SC2034
################################################################################
## This file is only for operation and maintenance personnel, not for developer.
## 此文件包含密钥信息，为运维人员和管理人员使用。
################################################################################

## 目标服务器的目标目录前缀 when deploy.conf 服务器目录=null
ENV_PATH_DEST_PRE="/var/www"

## remove gitlab-project-name prefix / 删除 gitlab 项目名称的前缀，例如 prefix-project01 --> project01
ENV_REMOVE_PROJ_PREFIX=false

## sonarqube url
ENV_SONAR_URL='http://sonar.example.com:9000/'
## sonarqube Community EditionVersion 9.0.1, generate sonarqube token from sonarqube web page
ENV_SONAR_TOKEN='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'

## set http proxy
# ENV_HTTP_PROXY='http://192.168.10.10:1080'
# http_proxy='http://192.168.10.10:1080'
# https_proxy='http://192.168.10.10:1080'
# HTTP_PROXY='http://192.168.10.10:1080'
# HTTPS_PROXY='http://192.168.10.10:1080'

## install jq cli
ENV_INSTALL_JQ=true

## install aliyun cli
ENV_INSTALL_ALIYUN=false

## install Terraform cli
ENV_INSTALL_TERRAFORM=false

## install aws cli 2.x
ENV_INSTALL_AWS=false

## install kubectl cli latest
ENV_INSTALL_KUBECTL=false

## install helm 3.x
ENV_INSTALL_HELM=false

## install python-gitlab (gitlab api)
ENV_INSTALL_PYTHON_GITLAB=false

## install python-element
ENV_INSTALL_PYTHON_ELEMENT=false

## install jdk/jmeter
ENV_INSTALL_JMETER=false

## install cloudflare dns cli, flarectl
ENV_INSTALL_FLARECTL=false

## install docker cli
ENV_INSTALL_DOCKER=true

## install podman cli
ENV_INSTALL_PODMAN=false

## install crontab cli
ENV_INSTALL_CRON=false

## docker context local/remote/both
ENV_DOCKER_CONTEXT=local
ENV_DOCKER_CONTEXT_HOSTS=(ssh://user@192.168.1.1:22 ssh://user@192.168.1.2:22 ssh://user@192.168.1.3:22)

## docker build --add-host=mvn.example.com:192.168.100.103
ENV_ADD_HOST='--add-host=mvn.example.com:192.168.100.103'

## docker build --build-arg=IN_CHINA=true
ENV_IN_CHINA=false

## gitlab server domain name, [bin/gitlab-adduser.sh]
ENV_GITLAB_DOMAIN='example.com'

## get_maxmind_ip_db to nginx server ip
ENV_NGINX_IPS="192.168.101.101 192.168.101.102"

ENV_ENABLE_MSG=false
ENV_DISABLE_MSG_BRANCH=develop

## send message to telegram.
# ENV_NOTIFY_TYPE=telegram
# ENV_TG_API_KEY='xxxxxxxxx:xxxx_xxxxxxxxx-xxxxxxxxx_xxxx_xxxxx'
# ENV_TG_GROUP_ID='-xxxxxxxxx'

## send message to element (matrix.org).
# ENV_NOTIFY_TYPE=element
# ENV_ELM_SERVER='https://matrix.example.com'
# ENV_ELM_USERID='@bot:example.com'
# ENV_ELM_PASSWORD='your_password'
# ENV_ELM_ROOMID='!xXxXxXxXxXxXxXxXxX:example.com'

## send message to work wecom.
# ENV_NOTIFY_TYPE=wecom
# ENV_WECOM_KEY=11111111111111 ## wecom group key

## send message with sendEmail
# ENV_NOTIFY_TYPE=email
# ENV_EMAIL_FROM=xx@yy.zz
# ENV_EMAIL_TO=aa@bb.cc
# ENV_EMAIL_SERVER=smtp.163.com
# ENV_EMAIL_USERNAME=xx@yy.zz
# ENV_EMAIL_PASSWORD=xxPassWord

## git 分支等效映射， 影响 k8s namespace, env_namespace=k8s_namespace
# case "${gitlab_project_branch}" in
# develop)
#     env_namespace="dev"
#     ;;
# test | testing)
#     env_namespace="sit"
#     ;;
# uat | release)
#     env_namespace="uat"
#     ;;
# prod | master | main)
#     env_namespace="main"
#     ;;
# *)
#     env_namespace="${gitlab_project_branch}"
#     ;;
# esac

# case "$env_namespace" in
# master | main | uat | release)
#     ENV_DOCKER_LOGIN_TYPE=aliyun
#     ENV_DOCKER_REGISTRY='nginx'
#     ENV_DOCKER_USERNAME='xxx@gmail.com'
#     ENV_DOCKER_PASSWORD='xxx'
#     kubectl_opt="kubectl --kubeconfig ${script_path_data}/.kube/config-main"
#     helm_opt="helm --kubeconfig ${script_path_data}/.kube/config-main"
#     ;;
# *)
#     ENV_DOCKER_LOGIN_TYPE=aliyun
#     ENV_DOCKER_REGISTRY='nginx-dev'
#     ENV_DOCKER_USERNAME='yyy@gmail.com'
#     ENV_DOCKER_PASSWORD='yyy'
#     kubectl_opt="kubectl --kubeconfig ${script_path_data}/.kube/config-dev"
#     helm_opt="helm --kubeconfig ${script_path_data}/.kube/config-dev"
#     ;;
# esac

## docker login to [aws]
# ENV_DOCKER_LOGIN_TYPE=aws
# ENV_REGION_ID='ap-east-1'
# ENV_DOCKER_REGISTRY='xxxxxxxxxxxx.dkr.ecr.ap-east-1.amazonaws.com/repo_east'
# ENV_NFS_SERVER='fs-xxxxxxxx.efs.ap-east-1.amazonaws.com'
# ENV_AWS_PROFILE=profile_east

## docker login to [aliyun]
ENV_DOCKER_LOGIN_TYPE=aliyun
ENV_DOCKER_REGISTRY='registry.cn-shenzhen.aliyuncs.com/ns/repo'
ENV_DOCKER_REGISTRY_BASE='registry.cn-shenzhen.aliyuncs.com/ns/base'
ENV_DOCKER_USERNAME=your_username
ENV_DOCKER_PASSWORD=your_password

## docker image mirror
ENV_DOCKER_MIRROR='registry.cn-hangzhou.aliyuncs.com/ns/repo'

## docker login to [qcloud]
# ENV_DOCKER_LOGIN_TYPE=qcloud
# ENV_DOCKER_REGISTRY='registry.cn-shenzhen.qcloud.com/ns/repo'
# ENV_DOCKER_USERNAME=your_username
# ENV_DOCKER_PASSWORD=your_password

## gitlab project name of nginx
ENV_NGINX_GIT_NAME=nginx

## gitlab project id "nginx"
ENV_NGINX_PROJECT_ID=(3 4)

## deploy flyway with k8s job, false: not use helm, true: use helm
ENV_FLYWAY_HELM_JOB=false

## flyway_sql folder in git repo, defautl "flyway_sql/"
ENV_FLYWAY_SQL=flyway_sql

## .acme.sh/dest as cert install folder
ENV_CERT_INSTALL=dest

## set alarm balance for aliyun / 设置余额报警阈值
ENV_ALARM_ALIYUN_BALANCE=3000
## set alarm for daily cash amount / 设置日消耗金额报警阈值
ENV_ALARM_ALIYUN_DAILY=100
## ~/.aliyun/config profile name / 配置文件名称
ENV_ALARM_ALIYUN_PROFILE=(profile_name_1 profile_name_2)
## send message to wecom / 发送消息到企业微信
ENV_ALARM_WECOM_KEY=11111111111111

## aliyun-cli profile name in ~/.aliyun/config.json
ENV_ALIYUN_PROFILE=someone

## inject files from ./data/projec_conf/, ./conf/
## 选项1. 不向目标仓库注入任何文件 [default]
ENV_INJECT=keep
## 选项2. 使用 ./data/projec_conf/, ./conf/ 内的相应文件覆盖到目标仓库，例如 Dockerfile 等
# ENV_INJECT=overwrite
## 选项3. 删除目标仓库的某些文件，例如 Dockerfile [不使用 docker build]
# ENV_INJECT=remove
## 选项4. 创建 docker-compose.yml [使用 docker-compose 发布]
# ENV_INJECT=create
## 针对某些分支执行某种选项
# if [[ "${gitlab_project_branch}" == release* ]]; then
#     ENV_INJECT=remove
# fi

## disable deploy to k8s / 禁止发布到 k8s
ENV_DISABLE_K8S=false

## deploy to aliyun functions 3.0 / 阿里云函数计算3.0
ENV_ENABLE_FUNC=false

## create helm chart files, PVC name / 创建 helm chart，预定义的 pvc 名称
ENV_HELM_VALUES_CNFS=cnfs-pvc-www
## create helm chart files, path in container / 创建 helm chart，预定义的 pvc 挂载到容器内的目录，例如 /data
ENV_HELM_VALUES_MOUNT_PATH=data

# Note: ENV_CLEAN_DISK has been removed. The disk cleanup threshold is now set to 80% by default in the _clean_up_disk_space function.
# You can still override it by setting ENV_CLEAN_DISK in your environment if needed.
